# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LzzSqKnngtMhQ7LPVjQW_27RGa9O2oMd
"""

import time
import pandas as pd
import numpy as chinp


CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
months = ['january', 'february', 'march', 'april', 'may', 'june','july']




def get_input(message):
    user_input = input(message).lower().strip()
    if user_input != None:
        return user_input
    else:
        return False



def get_city():
    city = get_input('what Would you like to display data for \n [Chicago, New York, or Washington?] ')
    while city not in (CITY_DATA.keys()):
        print('invalid city name')
        city = get_input('What Would you like to display data for \n [Chicago, New York, or Washington?] ')
    return city



def get_filter_date():
    filter = get_input('you Want to filter the data by \n month, day, both, or none? ')
    while filter not in(['month', 'day', 'both', 'none']):
        print('invalid filter')
        filter = get_input('you Want to filter the data by \n month, day, both, or none?  ')
    return filter



def get_filters():

    print('Hello! Let\'s explore some US bikeshare data!')
    
    city = get_city()
    filter_type = get_filter_date()
    if filter_type == 'month' or filter_type == 'both':
        month = get_input('Which month \n - January, February, March, April, May, or June? ')
        while month not in months:
            print(' invalid month')
            month = get_input('Which month - January, February, March, April, May, or June? ')
    else:
        month = 'all'

    

    if filter_type == 'day' or filter_type == 'both':
        day = get_input('Which day - \n Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday? ').title()
        while day not in days:
            print('invalid day')
            day = get_input('Which day - Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday? ').title()
    else:
        day = 'all'
    
    print('-'*40)
    return city, month, day



def load_city_file(city):
    pandas_file = pd.read_csv(CITY_DATA[city])
    return pandas_file



def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    pandas_file = load_city_file(city)
    pandas_file['Start Time'] = pd.to_datetime(pandas_file['Start Time'])
    pandas_file['month'] = pandas_file['Start Time'].dt.month
    pandas_file['day_of_week'] = pandas_file['Start Time'].dt.day_name()
    return pandas_file



def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    month = df['month'].mode()[0]
    print(f'The most common month is: {months[month-1]}')
    df.groupby('month')['User Type'].count().plot(ylabel='# of users', kind = 'bar')
    
    
    
    day = df['day_of_week'].mode()[0]
    print(f'The most common day of week is: {day}')
    df.groupby('day_of_week')['User Type'].count().plot(ylabel='# of users', kind = 'bar')
    
    
    
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print(f'The most common start hour is: {popular_hour}')
    df.groupby('hour')['User Type'].count().plot(ylabel='# of users', kind = 'bar')
    

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)



def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    print(f'The most popular start station is: {popular_start_station}')
 
    
    # display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]
    print(f'The most popular end station is: {popular_end_station}')
 
    
    
    # display most frequent combination of start station and end station trip
    popular_trip = df['Start Station'] + ' to ' + df['End Station']
    print(f'The most popular trip is: from {popular_trip.mode()[0]}')


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)




def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_travel_duration = (pd.to_datetime(df['End Time']) - pd.to_datetime(df['Start Time'])).sum()
    days =  total_travel_duration.days
    hours = total_travel_duration.seconds // (60*60)
    minutes = total_travel_duration.seconds % (60*60) // 60
    seconds = total_travel_duration.seconds % (60*60) % 60
    print(f'Total travel time is: {days} days {hours} hours {minutes} minutes {seconds} seconds')

    # display mean travel time
    average_travel_duration = (pd.to_datetime(df['End Time']) - pd.to_datetime(df['Start Time'])).mean()
    days =  average_travel_duration.days
    hours = average_travel_duration.seconds // (60*60)
    minutes = average_travel_duration.seconds % (60*60) // 60
    seconds = average_travel_duration.seconds % (60*60) % 60
    print(f'Average travel time is: {days} days {hours} hours {minutes} minutes {seconds} seconds')


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)




def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

   # Display counts of user types
    print(df['User Type'].value_counts())
    df['User Type'].value_counts().plot(ylabel='# of users', kind='bar')
    
    print('\n\n')

    # Display counts of gender
    if 'Gender' in(df.columns):
        print(df['Gender'].value_counts())
        df['Gender'].value_counts().plot(ylabel='# of users', kind='bar')
        
        print('\n\n')


    # Display earliest, most recent, and most common year of birth
    if 'Birth Year' in(df.columns):
        df['Birth Year'] = pd.to_numeric(df['Birth Year'] , errors='coerce').astype(pd.Int64Dtype())
        year = df['Birth Year']
        print(f'Earliest birth year is: {year.min()}\nmost recent is: {year.max()}\nand most comon birth year is: {year.mode()[0]}')
        df.groupby('Birth Year')['User Type'].count().plot(xlabel='# of users', kind = 'barh', figsize=(20,60))
        

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)



def display_raw_data(df):
    """Ask the user if he wants to display the raw data and print 5 rows at time"""
    raw = input('\nWould you like to diplay raw data?\n')
    if raw.lower() == 'yes':
        count = 0
        while True:
            print(df.iloc[count: count+5])
            count += 5
            ask = input('Next 5 raws?')
            if ask.lower() != 'yes':
                break




def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(df)
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()